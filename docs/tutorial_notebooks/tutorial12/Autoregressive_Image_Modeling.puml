@startuml
class MaskedConvolution {
    conv
    __init__()
    forward()
}

nn.Module <|- MaskedConvolution
MaskedConvolution *--> nn.Conv2d : conv

class VerticalStackConvolution {
    __init__()
}

MaskedConvolution <|- VerticalStackConvolution

class HorizontalStackConvolution {
    __init__()
}

MaskedConvolution <|- HorizontalStackConvolution

class GatedMaskedConv {
    conv_horiz
    conv_horiz_1x1
    conv_vert
    conv_vert_to_horiz
    __init__()
    forward()
}

nn.Module <|- GatedMaskedConv
GatedMaskedConv *--> VerticalStackConvolution : conv_vert
GatedMaskedConv *--> HorizontalStackConvolution : conv_horiz
GatedMaskedConv *--> nn.Conv2d : conv_vert_to_horiz
GatedMaskedConv *--> nn.Conv2d : conv_horiz_1x1

class PixelCNN {
    conv_hstack
    conv_layers
    conv_out
    conv_vstack
    example_input_array
    __init__()
    calc_likelihood()
    configure_optimizers()
    forward()
    sample()
    test_step()
    training_step()
    validation_step()
}

pl.LightningModule <|- PixelCNN
PixelCNN *--> VerticalStackConvolution : conv_vstack
PixelCNN *--> HorizontalStackConvolution : conv_hstack
PixelCNN *--> nn.ModuleList : conv_layers
PixelCNN *--> nn.Conv2d : conv_out
class Autoregressive_Image_Modeling_py <<module>> << (M,orchid) >> #DarkSeaGreen {
    CHECKPOINT_PATH
    DATASET_PATH
    ax_sub
    base_url
    det_loader
    device
    fig
    file_path
    file_url
    horiz_conv
    horiz_img
    img
    imgs
    inp
    inp_img
    mean_out
    model
    mu
    num_params
    out
    p
    plot_args
    pretrained_files
    samples
    sigma
    test_loader
    test_model
    test_res
    test_set
    torch
    train_dataset
    train_loader
    train_set
    transform
    val_loader
    vert_conv
    vert_img
    x
    ---
    autocomplete_image()
    discrete_logistic()
    discretize()
    show_center_recep_field()
    show_imgs()
    train_model()
}

Autoregressive_Image_Modeling_py .. MaskedConvolution : contains >
Autoregressive_Image_Modeling_py .. VerticalStackConvolution : contains >
Autoregressive_Image_Modeling_py .. HorizontalStackConvolution : contains >
Autoregressive_Image_Modeling_py .. GatedMaskedConv : contains >
Autoregressive_Image_Modeling_py .. PixelCNN : contains >
Autoregressive_Image_Modeling_py --> MNIST : uses
Autoregressive_Image_Modeling_py --> data.DataLoader : uses
Autoregressive_Image_Modeling_py --> torch.zeros : uses
Autoregressive_Image_Modeling_py --> plt.subplots : uses
Autoregressive_Image_Modeling_py --> np.zeros : uses
Autoregressive_Image_Modeling_py --> np.array : uses
Autoregressive_Image_Modeling_py --> HorizontalStackConvolution : uses
Autoregressive_Image_Modeling_py --> VerticalStackConvolution : uses
Autoregressive_Image_Modeling_py --> PixelCNN : uses
Autoregressive_Image_Modeling_py --> pl.Trainer : uses
Autoregressive_Image_Modeling_py --> torch.load : uses
Autoregressive_Image_Modeling_py --> F.softmax : uses
Autoregressive_Image_Modeling_py --> torch.Tensor : uses
Autoregressive_Image_Modeling_py --> torch.arange : uses
center footer Generated by GitUml www.gituml.com
hide empty members
@enduml
